#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"
#include "parser.h"
#include "Controller.h"
#include "utn.h"


/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{
	int rtn = -1;
	char validacionSoN = 's';

		if (path != NULL && pArrayListEmployee != NULL)
		{
			if(ll_isEmpty (pArrayListEmployee) == 1)
			{
				FILE *pFile=fopen(path,"r");

				if(pFile != NULL && parser_EmployeeFromText(pFile, pArrayListEmployee)== 0)
				{
					printf("\nArchivo leido con éxito");
					rtn = 0;
				}else{
						printf("\nNo se pudo leer el archivo");
						}

				fclose(pFile);

			}else{

				utn_getCharRespSoN(&validacionSoN, "\nYa hay datos cargados, desea guardarlos? (s/n): ","\n Error, ingrese nuevamente", 3);

				switch (validacionSoN)
				{
					case 'n':
						printf("\nSe han borrado los datos cargados.");
						ll_clear(pArrayListEmployee);
						FILE *pFile=fopen(path,"r");

						if(pFile != NULL && parser_EmployeeFromText(pFile, pArrayListEmployee)== 0 )
						{
							printf("\nArchivo nuevo leido con éxito");
							fclose(pFile);
							rtn = 0;
						}
						break;

					case 's':
						if(controller_saveAsText("back.csv", pArrayListEmployee)== 0)
						{
							ll_clear(pArrayListEmployee);
							FILE *pFile=fopen(path,"r");

								if(pFile != NULL && parser_EmployeeFromText(pFile, pArrayListEmployee)== 0)
								{
									printf("\nArchivo nuevo leido con éxito");
									fclose(pFile);
									rtn = 0;
								}
						}
						break;
				}
				}
		}
	return rtn;
}

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
	int rtn= -1;
	char validacionSoN;

		if (path != NULL && pArrayListEmployee != NULL)
		{

			if(ll_isEmpty (pArrayListEmployee )== 1)
			{
				FILE *pFile=fopen(path,"rb");

				if(pFile != NULL && parser_EmployeeFromBinary(pFile, pArrayListEmployee)== 0)
				{
					printf("\nArchivo leido con éxito");
					rtn = 0;

				}else{
						printf("\nNo se pudo leer el archivo");
						}

				fclose(pFile);

			}else{

				utn_getCharRespSoN(&validacionSoN, "\nHay datos cargados en el sistema, desea guardarlos? (s/n)","\n Error, ingrese nuevamente", 3);

				switch (validacionSoN)
				{
					case 'n':
						printf("\nSe han borrado los datos cargados");
						ll_clear(pArrayListEmployee);
						FILE *pFile=fopen(path,"rb");

						if(pFile != NULL && parser_EmployeeFromBinary(pFile, pArrayListEmployee)== 0)
						{
							printf("\nArchivo nuevo leido con éxito");
							fclose(pFile);
							rtn = 0;
						}
					break;

					case 's':
						if (controller_saveAsBinary("back.bin",pArrayListEmployee)== 0)
						{
							ll_clear(pArrayListEmployee);
							FILE *pFile=fopen(path,"rb");

							if(pFile != NULL && parser_EmployeeFromBinary(pFile, pArrayListEmployee)== 0)
							{
								printf("\nArchivo nuevo leido con éxito");
								fclose(pFile);
								rtn = 0;
							}
						}
					break;
				}
				}
		}
	return rtn;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee)
{
	int rtn = -1;
    Employee *auxEmpleado = NULL;
	char auxNombre[150];
	int auxHorasTrabajadas;
	int auxSueldo;
	int lenListaEmpleados;
	int i;
	int idMax=0;

    	if (pArrayListEmployee != NULL)
    	{

    		printf("\n---------------- Alta de un nuevo Empleado -------------\n");
    		if (pedirCadena(auxNombre, 150, 3, "Ingrese Nombre: ","Error, reingrese Nombre: ")== 1 &&
				pedirEntero(&auxHorasTrabajadas, 0, 200, 3, "Ingrese Horas Trabajadas: ","Error, reingrese Horas Trabajadas: ")== 1 &&
				pedirEntero(&auxSueldo, 1, 500000, 3, "Ingrese Sueldo: ", "Error, reingrese Sueldo: ")== 1)
    		{

    			if( ll_isEmpty(pArrayListEmployee) == 0)
    			{

    				lenListaEmpleados = ll_len(pArrayListEmployee);

					for(i=0; i<lenListaEmpleados ; i++)
					{
						auxEmpleado =ll_get(pArrayListEmployee, i);

						employee_getId(auxEmpleado, &idMax);

					}
    			 }
    					idMax++;

    				    auxEmpleado = employee_new();

    					if( employee_setId(auxEmpleado, idMax)== 0 &&
    						employee_setNombre(auxEmpleado, auxNombre)== 0 &&
							employee_setHorasTrabajadas(auxEmpleado, auxHorasTrabajadas)== 0 &&
							employee_setSueldo(auxEmpleado, auxSueldo)== 0)
    					{
    						ll_add(pArrayListEmployee, auxEmpleado);

							printf("\nEl Empleado cargado es: \n");
							employee_ImprimirUno(auxEmpleado);
							rtn=0;

    					}else{
    						printf("\nError al cargar el Empleado \n");
    						}
    		}
    	}
    return rtn;
}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee)
{
	int rtn = -1;
	Employee *auxEmpleado = NULL;
	int auxId = 0;
	char auxNombre[200];
	int auxHorasTrabajadas;
	int auxSueldo;
	int datoAMod;
	int idEmpleadoAMod;
	int lenEmpleados;
	int idMax;
	int i;

		if(ll_isEmpty(pArrayListEmployee) == 0 && pArrayListEmployee != NULL){

				printf("\n    ---------------- Modificación de un empleado ------------- \n");


					lenEmpleados = ll_len(pArrayListEmployee);
					for(int i=0; i<lenEmpleados ; i++)
					{
						auxEmpleado = ll_get(pArrayListEmployee, i);
						libro_getId(auxEmpleado, &idMax);
					}


					if(pedirEntero(&idEmpleadoAMod, 1, idMax, 3, "\nIngrese el id del Empleado a modificar: ", "\nError, intente nuevamente")== 0)
					{

						for (i = 0; i < lenEmpleados; i++)
						{
							auxEmpleado = ll_get(pArrayListEmployee, i);
							employee_getId(auxEmpleado, &auxId);

							if (idEmpleadoAMod == auxId)
							{
								printf("\nEmpleado encontrado");
								employee_ImprimirUno(auxEmpleado);
								break;
							}
						}

						do{
							pedirEntero(&datoAMod, 1, 4, 3, "\n INGRESE UNA OPCION \n1- Modificar Nombre \n2- Modificar Horas Trabajadas \n3- Modificar Salario, \n4- Volver al menu principal","\n Error, ingrese nuevamente");

							switch (datoAMod) {
								case 1:
									if (pedirCadena(auxNombre, 200, 3, "\n Ingrese Nombre: ","\n Error, reingrese Nombre: ")== 0 &&
										 employee_setNombre(auxEmpleado, auxNombre)== 0)
									{
											printf("\n DATOS MODIFICADOS------------------------------- \n");
											employee_ImprimirUno(auxEmpleado);
											rtn=0;
									}
									break;
								case 2:
									if (pedirEntero(&auxHorasTrabajadas, 0, 200, 3, "\n Ingrese las Horas Trabajadas: ","\n Error, reingrese Horas Trabajadas: ")== 0 &&
										  employee_setHorasTrabajadas(auxEmpleado, auxHorasTrabajadas) == 0)
									{
											printf("\n DATOS MODIFICADOS-------------------------------- \n");
											employee_ImprimirUno(auxEmpleado);
											rtn=0;
									}
									break;
								case 3:
									if (  (utn_getNumero(&auxSueldo,"\n Ingrese el sueldo  ", "\n Error, intente nuevamente", 1, 90000,3) == 0) &&
										  (employee_setSueldo(auxEmpleado, auxSueldo) == 0) ){
												printf("\n DATOS MODIFICADOS-------------------------------- \n");
												employee_ImprimirUno(auxEmpleado);
												rtn=0;
									}
								break;
								case 4:
								break;
							}
						 }while(datoAMod != 4);


					}else{
						printf("\n\nID no encontrado");
					}

		}else{
			printf("No hay empleados cargados");

		}
    return rtn;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
	int rtn=-1;
	Employee* pEaux;
	int i;
	int  auxId;
	char auxNombre[150];
	int auxHorasTrabajadas;
	int auxSueldo;

	int len_EmployeeAux = ll_len(pArrayListEmployee);

	if(pArrayListEmployee != NULL && len_EmployeeAux>0)
	{
		for(i=0; i < len_EmployeeAux; i++)
	    {
	        pEaux = ll_get(pArrayListEmployee,i);

	    	employee_getId(pEaux, &auxId);
	    	employee_getNombre(pEaux, auxNombre);
	    	employee_getHorasTrabajadas(pEaux, &auxHorasTrabajadas);
	    	employee_getSueldo(pEaux, &auxSueldo);

	        printf("ID: %d Nombre: %s sueldo: %d Horas_Trabajadas: %d\n",auxId, auxNombre,auxSueldo, auxHorasTrabajadas);
	        rtn=i;
	    }
	}
    return rtn;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
	int rtn = -1;
	int auxId;
	char auxNombre[200];
	int auxHorasTrabajadas;
	int auxSueldo;

		if(ll_isEmpty(pArrayListEmployee) == 0)
		{
		FILE *pFile = fopen(path,"w");

			if (path != NULL && pArrayListEmployee != NULL && pFile != NULL)
			{

				fprintf( pFile,"id,    Nombre,    HorasTrabajadas,    Sueldo\n");

				for(int i = 0; i < ll_len(pArrayListEmployee); i++)
				{

					Employee  *auxEmployee = ll_get(pArrayListEmployee, i);

					if(employee_getId(auxEmployee, &auxId) == 0 &&
					employee_getNombre(auxEmployee, auxNombre) == 0 &&
					employee_getHorasTrabajadas(auxEmployee, &auxHorasTrabajadas) == 0 &&
					employee_getSueldo(auxEmployee, &auxSueldo) == 0 )
					{
					fprintf( pFile,"%d, %s, %d, %d\n", auxId, auxNombre, auxHorasTrabajadas, auxSueldo);
					}
				}

				fclose(pFile);
				printf("\nDatos guardados en %s", path);
				rtn = 0;
			}
		}else{
			printf("Error, No hay datos para guardar");

			}
	return rtn;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
	int rtn = -1;
	int cantEscrita;
	int lenEmployees;
	int i;

		if(ll_isEmpty(pArrayListEmployee)== 0)
		{
			if (path != NULL && pArrayListEmployee != NULL)
			{
				FILE *pFile=fopen(path,"wb");

				lenEmployees = ll_len(pArrayListEmployee);

				for(i = 0; i < lenEmployees; i++ )
				{

					Employee*  auxEmployee= ll_get(pArrayListEmployee, i);

					if(pFile != NULL)
					{
						cantEscrita = fwrite(auxEmployee, sizeof(Employee),1, pFile);
					}
				}

				if (cantEscrita < 1)
				{
					printf("\nError al escribir el archivo");

				}else{
					printf("\nDatos guardados en %s", path);
					rtn = 0;
					}

				fclose(pFile);
			}

		}else{
			printf("Error, No hay datos para guardar");
			}

    return rtn;
}

