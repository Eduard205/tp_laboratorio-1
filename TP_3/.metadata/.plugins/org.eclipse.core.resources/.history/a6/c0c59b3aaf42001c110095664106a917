#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"
#include "parser.h"
#include "Controller.h"
#include "utn.h"


/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{

	int rtn = -1;
	char validacionSoN = 's';

		if (path != NULL && pArrayListEmployee != NULL){


			if(ll_isEmpty (pArrayListEmployee) == 1){

				FILE *pFile=fopen(path,"r");

				if(pFile != NULL &&
				   parser_EmployeeFromText(pFile, pArrayListEmployee) == 0 )
				{
					printf("\nArchivo leido con éxito");
					fclose(pFile);
					rtn = 0;

				}else{
						printf("\nNo se pudo leer el archivo");
						}


			}else{

				utn_getCharRespSoN(&validacionSoN, "\nYa hay datos cargados, desea guardarlos? ('s' o 'n'): ","\n Error, ingrese nuevamente", 3);

				switch (validacionSoN)
				{
					case 'n':
						printf("\nSe han borrado los datos cargados anteriormente.  ");
						ll_clear(pArrayListEmployee);
						FILE *pFile=fopen(path,"r");

						if(pFile != NULL && parser_EmployeeFromText(pFile, pArrayListEmployee) == 0 )
						{
							printf("\nArchivo nuevo leido con éxito");
							fclose(pFile);
							rtn = 0;
						}
					break;

					case 's':
						if(controller_saveAsText( "respaldo.csv", pArrayListEmployee) == 0)
						{
							ll_clear(pArrayListEmployee);

							FILE *pFile=fopen(path,"r");

							if(pFile != NULL && parser_EmployeeFromText(pFile, pArrayListEmployee) == 0 )
							{
								printf("\nArchivo nuevo leido con éxito");
								fclose(pFile);
								rtn = 0;
							}
						}
					break;
					}
				}
		}
	    return rtn;

}

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
	int rtn = -1;
	int auxId;
	char auxNombre[200];
	int auxHorasTrabajadas;
	int auxSueldo;

		if(ll_isEmpty(pArrayListEmployee) == 0)
		{
		FILE *pFile = fopen(path,"w");

			if (path != NULL && pArrayListEmployee != NULL && pFile != NULL)
			{

				fprintf( pFile,"id,    Nombre,    HorasTrabajadas,    Sueldo\n");

				for(int i = 0; i < ll_len(pArrayListEmployee); i++)
				{

					Employee  *auxEmployee = ll_get(pArrayListEmployee, i);

					if(employee_getId(auxEmployee, &auxId) == 0 &&
					employee_getNombre(auxEmployee, auxNombre) == 0 &&
					employee_getHorasTrabajadas(auxEmployee, &auxHorasTrabajadas) == 0 &&
					employee_getSueldo(auxEmployee, &auxSueldo) == 0 )
					{
					fprintf( pFile,"%d, %s, %d, %d\n", auxId, auxNombre, auxHorasTrabajadas, auxSueldo);
					}
				}

				fclose(pFile);
				printf("\nDatos guardados en %s", path);
				rtn = 0;
			}
		}else{
			printf("Error, No hay datos para guardar");

			}
	return rtn;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
    return 1;
}

